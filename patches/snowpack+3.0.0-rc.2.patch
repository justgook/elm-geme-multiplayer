diff --git a/node_modules/snowpack/assets/hmr-client.js b/node_modules/snowpack/assets/hmr-client.js
index d7a7d6a..26541ab 100644
--- a/node_modules/snowpack/assets/hmr-client.js
+++ b/node_modules/snowpack/assets/hmr-client.js
@@ -49,9 +49,9 @@ function sendSocketMessage(msg) {
 let socketURL = isWindowDefined && window.HMR_WEBSOCKET_URL;
 if (!socketURL) {
   const socketHost =
-    isWindowDefined && window.HMR_WEBSOCKET_PORT
-      ? `${location.hostname}:${window.HMR_WEBSOCKET_PORT}`
-      : location.host;
+      isWindowDefined && window.HMR_WEBSOCKET_PORT
+          ? `${location.hostname}:${window.HMR_WEBSOCKET_PORT}`
+          : location.host;
   socketURL = (location.protocol === 'http:' ? 'ws://' : 'wss://') + socketHost + '/';
 }
 
@@ -130,8 +130,8 @@ export function createHotContext(fullUrl) {
 async function runCssStyleAccept({url: id}) {
   const nonce = Date.now();
   const oldLinkEl =
-    document.head.querySelector(`link[data-hmr="${id}"]`) ||
-    document.head.querySelector(`link[href="${id}"]`);
+      document.head.querySelector(`link[data-hmr="${id}"]`) ||
+      document.head.querySelector(`link[href="${id}"]`);
   if (!oldLinkEl) {
     return true;
   }
@@ -141,10 +141,10 @@ async function runCssStyleAccept({url: id}) {
   linkEl.rel = 'stylesheet';
   linkEl.href = id + '?mtime=' + nonce;
   linkEl.addEventListener(
-    'load',
-    // Once loaded, remove the old link element (with some delay, to avoid FOUC)
-    () => setTimeout(() => document.head.removeChild(oldLinkEl), 30),
-    false,
+      'load',
+      // Once loaded, remove the old link element (with some delay, to avoid FOUC)
+      () => setTimeout(() => document.head.removeChild(oldLinkEl), 30),
+      false,
   );
   oldLinkEl.parentNode.insertBefore(linkEl, oldLinkEl)
   return true;
@@ -198,8 +198,8 @@ socket.addEventListener('message', ({data: _data}) => {
   }
   if (data.type === 'error') {
     console.error(
-      `[ESM-HMR] ${data.fileLoc ? data.fileLoc + '\n' : ''}`,
-      data.title + '\n' + data.errorMessage,
+        `[ESM-HMR] ${data.fileLoc ? data.fileLoc + '\n' : ''}`,
+        data.title + '\n' + data.errorMessage,
     );
     createNewErrorOverlay(data);
     return;
@@ -207,27 +207,27 @@ socket.addEventListener('message', ({data: _data}) => {
   if (data.type === 'update') {
     log('message: update', data);
     (data.url.endsWith('.css') ? runCssStyleAccept(data) : runJsModuleAccept(data))
-      .then((ok) => {
-        if (ok) {
-          clearErrorOverlay();
-        } else {
-          reload();
-        }
-      })
-      .catch((err) => {
-        console.error('[ESM-HMR] Hot Update Error', err);
-        // A failed import gives a TypeError, but invalid ESM imports/exports give a SyntaxError.
-        // Failed build results already get reported via a better WebSocket update.
-        // We only want to report invalid code like a bad import that doesn't exist.
-        if (err instanceof SyntaxError) {
-          createNewErrorOverlay({
-            title: 'Hot Update Error',
-            fileLoc: data.url,
-            errorMessage: err.message,
-            errorStackTrace: err.stack,
-          });
-        }
-      });
+        .then((ok) => {
+          if (ok) {
+            clearErrorOverlay();
+          } else {
+            reload();
+          }
+        })
+        .catch((err) => {
+          console.error('[ESM-HMR] Hot Update Error', err);
+          // A failed import gives a TypeError, but invalid ESM imports/exports give a SyntaxError.
+          // Failed build results already get reported via a better WebSocket update.
+          // We only want to report invalid code like a bad import that doesn't exist.
+          if (err instanceof SyntaxError) {
+            createNewErrorOverlay({
+              title: 'Hot Update Error',
+              fileLoc: data.url,
+              errorMessage: err.message,
+              errorStackTrace: err.stack,
+            });
+          }
+        });
     return;
   }
   log('message: unknown', data);
@@ -235,7 +235,7 @@ socket.addEventListener('message', ({data: _data}) => {
 log('listening for file changes...');
 
 /** Runtime error reporting: If a runtime error occurs, show it in an overlay. */
-window && window.addEventListener('error', function (event) {
+isWindowDefined && window.addEventListener('error', function (event) {
   // Generate an "error location" string
   let fileLoc;
   if (event.filename) {
